See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (4 warnings)
Checkstyle:   FAILED (27 warnings)

Correctness:  27/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 79.51%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.0K Feb 15 18:24 BruteCollinearPoints.java
2.2K Feb 15 18:24 FastCollinearPoints.java
3.9K Feb 15 18:24 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'b' but that value is never used.  At Point.java:[line 127]
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'a' but that value is never used.  At Point.java:[line 126]
M D UC_USELESS_VOID_METHOD UC: The void method 'main()' appears to serve no purpose.  At Point.java:[line 130]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 28]
Warnings generated: 4

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Point.java:1: Do not use .* in import statements. [AvoidStarImport]
Point.java:2: Do not use .* in import statements. [AvoidStarImport]
Point.java:57:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Point.java:127:33: ',' is not followed by whitespace. [WhitespaceAfter]
BruteCollinearPoints.java:1: Do not use .* in import statements. [AvoidStarImport]
BruteCollinearPoints.java:3: Do not use .* in import statements. [AvoidStarImport]
BruteCollinearPoints.java:43:34: '{' is not preceded with whitespace. [WhitespaceAround]
BruteCollinearPoints.java:49:30: '(' is preceded with whitespace. [MethodParamPad]
BruteCollinearPoints.java:49:46: '{' is not preceded with whitespace. [WhitespaceAround]
BruteCollinearPoints.java:50:12: 'for' is not followed by whitespace. [WhitespaceAfter]
BruteCollinearPoints.java:50:51: '{' is not preceded with whitespace. [WhitespaceAround]
BruteCollinearPoints.java:51:16: 'for' is not followed by whitespace. [WhitespaceAfter]
BruteCollinearPoints.java:51:53: '{' is not preceded with whitespace. [WhitespaceAround]
BruteCollinearPoints.java:58:43: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:17:47: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:23:56: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:28:70: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:30: Line is longer than 128 characters (currently 145). [LineLength]
FastCollinearPoints.java:30:145: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:31:22: Control variable 's' is modified inside loop. [ModifiedControlVariable]
FastCollinearPoints.java:34:19: 'if' is not followed by whitespace. [WhitespaceAfter]
FastCollinearPoints.java:34:77: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:44:34: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:51:49: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:52:52: '{' is not preceded with whitespace. [WhitespaceAround]
FastCollinearPoints.java:53:15: 'if' is not followed by whitespace. [WhitespaceAfter]
FastCollinearPoints.java:59:43: '{' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 27 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: Random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: Random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: Random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: Points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: Check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: Random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: Random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: Check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: Check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (7000, 3000)
    - reference segment 0: (10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)

    - student   solution has 2 non-null entries
    - reference solution has 2 non-null entries
    - 2 extra entries in student solution, including: (3000, 4000) -> (6000, 7000)
    - 2 missing entries in student solution, including: (3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)


  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (8000, 2000)
    - reference segment 1: (10000, 0) -> (8000, 2000) -> (2000, 8000) -> (0, 10000)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 4 extra entries in student solution, including: (30000, 0) -> (20000, 10000)
    - 4 missing entries in student solution, including: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (13000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 4 extra entries in student solution, including: (2000, 29000) -> (4000, 29000)
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 1000) -> (12000, 10000)
    - reference segment 3: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: (1000, 26000) -> (9000, 26000)
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


  * filename = input299.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2950, 200) -> (2950, 4050)
    - reference segment 4: (2950, 200) -> (2950, 4050) -> (2950, 5600) -> (2950, 25400)

    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: (3250, 17450) -> (8500, 17450)
    - 6 missing entries in student solution, including: (3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)


==> FAILED

Test 2a: Points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4750, 4652) -> (5766, 4652)
    - reference segment 0: (4750, 4652) -> (5766, 4652) -> (9972, 4652) -> (16307, 4652)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (2682, 14118) -> (5067, 14118)
    - 5 missing entries in student solution, including: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10021, 1256) -> (13505, 1256)
    - reference segment 0: (10021, 1256) -> (13505, 1256) -> (16419, 1256) -> (19615, 1256)

    - student   solution has 25 non-null entries
    - reference solution has 25 non-null entries
    - 25 extra entries in student solution, including: (8784, 20913) -> (9880, 20913)
    - 25 missing entries in student solution, including: (8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)


  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2624, 1040) -> (4459, 1040)
    - reference segment 0: (2624, 1040) -> (4459, 1040) -> (8302, 1040) -> (15579, 1040)

    - student   solution has 50 non-null entries
    - reference solution has 50 non-null entries
    - 50 extra entries in student solution, including: (5249, 20754) -> (5559, 20754)
    - 50 missing entries in student solution, including: (5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)


  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7903, 1061) -> (8084, 1061)
    - reference segment 0: (7903, 1061) -> (8084, 1061) -> (17515, 1061) -> (20959, 1061)

    - student   solution has 75 non-null entries
    - reference solution has 75 non-null entries
    - 75 extra entries in student solution, including: (1536, 20976) -> (6545, 20976)
    - 75 missing entries in student solution, including: (1536, 20976) -> (6545, 20976) -> (14178, 20976) -> (14591, 20976)


  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1090, 1279) -> (7354, 1279)
    - reference segment 0: (1090, 1279) -> (7354, 1279) -> (8690, 1279) -> (13975, 1279)

    - student   solution has 100 non-null entries
    - reference solution has 100 non-null entries
    - 100 extra entries in student solution, including: (5835, 20698) -> (7673, 20698)
    - 100 missing entries in student solution, including: (5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)


==> FAILED

Test 2b: Random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1283, 17296) -> (12057, 17296)
    - reference segment 0: (1283, 17296) -> (12057, 17296) -> (18352, 17296) -> (18904, 17296)

    - student   solution has 1 non-null entries
    - reference solution has 1 non-null entries
    - 1 extra entry in student solution: (1283, 17296) -> (12057, 17296)
    - 1 missing entry in student solution: (1283, 17296) -> (12057, 17296) -> (18352, 17296) -> (18904, 17296)


    - failed on trial 1 of 500
     4
     12057 17296
     18352 17296
     18904 17296
      1283 17296

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9414, 3432) -> (9570, 3432)
    - reference segment 0: (9414, 3432) -> (9570, 3432) -> (9914, 3432) -> (10816, 3432)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (2725, 20829) -> (11271, 20829)
    - 5 missing entries in student solution, including: (2725, 20829) -> (11271, 20829) -> (12557, 20829) -> (20857, 20829)


    - failed on trial 1 of 250
     20
      9914  3432
      2672 12052
     12557 20829
      2725 20829
     10816  3432
     19152  6187
     16824 13943
     20857 20829
      6535 12052
      4560  6187
      9570  3432
     11271 20829
     13509 12052
      7154 13943
     14752  6187
     17481 13943
      8371 13943
      9491 12052
      9414  3432
     15676  6187

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5331, 1731) -> (6998, 1731)
    - reference segment 0: (5331, 1731) -> (6998, 1731) -> (12627, 1731) -> (20965, 1731)

    - student   solution has 10 non-null entries
    - reference solution has 10 non-null entries
    - 10 extra entries in student solution, including: (11904, 20819) -> (14641, 20819)
    - 10 missing entries in student solution, including: (11904, 20819) -> (14641, 20819) -> (18263, 20819) -> (18336, 20819)


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3590, 1262) -> (11013, 1262)
    - reference segment 0: (3590, 1262) -> (11013, 1262) -> (15374, 1262) -> (17310, 1262)

    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 15 extra entries in student solution, including: (1471, 20424) -> (1869, 20424)
    - 15 missing entries in student solution, including: (1471, 20424) -> (1869, 20424) -> (6289, 20424) -> (12286, 20424)


    - failed on trial 1 of 5

==> FAILED

Test 3a: Points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8421, 1829) -> (8421, 11344)
    - reference segment 2: (8421, 1829) -> (8421, 11344) -> (8421, 15144) -> (8421, 18715)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (14407, 10367) -> (14407, 17188)
    - 5 missing entries in student solution, including: (14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)


  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9557, 1388) -> (9557, 15046)
    - reference segment 11: (9557, 1388) -> (9557, 15046) -> (9557, 18873) -> (9557, 20238)

    - student   solution has 25 non-null entries
    - reference solution has 25 non-null entries
    - 25 extra entries in student solution, including: (19953, 10489) -> (19953, 10688)
    - 25 missing entries in student solution, including: (19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)


  * filename = vertical50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10209, 1143) -> (10209, 8678)
    - reference segment 25: (10209, 1143) -> (10209, 8678) -> (10209, 12125) -> (10209, 12199)

    - student   solution has 50 non-null entries
    - reference solution has 50 non-null entries
    - 50 extra entries in student solution, including: (5991, 15606) -> (5991, 20227)
    - 50 missing entries in student solution, including: (5991, 15606) -> (5991, 20227) -> (5991, 20340) -> (5991, 20424)


  * filename = vertical75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9632, 1012) -> (9632, 5382)
    - reference segment 27: (9632, 1012) -> (9632, 5382) -> (9632, 16430) -> (9632, 17477)

    - student   solution has 75 non-null entries
    - reference solution has 75 non-null entries
    - 75 extra entries in student solution, including: (13780, 16365) -> (13780, 17494)
    - 75 missing entries in student solution, including: (13780, 16365) -> (13780, 17494) -> (13780, 18253) -> (13780, 18908)


  * filename = vertical100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13469, 1049) -> (13469, 4082)
    - reference segment 60: (13469, 1049) -> (13469, 4082) -> (13469, 10837) -> (13469, 20173)

    - student   solution has 100 non-null entries
    - reference solution has 100 non-null entries
    - 100 extra entries in student solution, including: (15135, 15588) -> (15135, 17398)
    - 100 missing entries in student solution, including: (15135, 15588) -> (15135, 17398) -> (15135, 19476) -> (15135, 20439)


==> FAILED

Test 3b: Random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1795, 4667) -> (1795, 8111)
    - reference segment 0: (1795, 4667) -> (1795, 8111) -> (1795, 11233) -> (1795, 17511)

    - student   solution has 1 non-null entries
    - reference solution has 1 non-null entries
    - 1 extra entry in student solution: (1795, 4667) -> (1795, 8111)
    - 1 missing entry in student solution: (1795, 4667) -> (1795, 8111) -> (1795, 11233) -> (1795, 17511)


    - failed on trial 1 of 500
     4
      1795  4667
      1795  8111
      1795 11233
      1795 17511

  *  5 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (16114, 2756) -> (16114, 4461)
    - reference segment 4: (16114, 2756) -> (16114, 4461) -> (16114, 7622) -> (16114, 19977)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (2244, 7048) -> (2244, 10145)
    - 5 missing entries in student solution, including: (2244, 7048) -> (2244, 10145) -> (2244, 17224) -> (2244, 17411)


    - failed on trial 1 of 250
     20
     16114  4461
      6598 11732
      6598  4342
      4754 15454
      4754 11892
      2244 10145
      6598 16865
      4754 15286
      4754  2952
      7314 12693
     16114  7622
     16114  2756
     16114 19977
      2244  7048
      2244 17411
      6598 15004
      7314 13934
      2244 17224
      7314 14442
      7314  6084

  * 10 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10138, 1502) -> (10138, 3151)
    - reference segment 7: (10138, 1502) -> (10138, 3151) -> (10138, 5997) -> (10138, 12377)

    - student   solution has 10 non-null entries
    - reference solution has 10 non-null entries
    - 10 extra entries in student solution, including: (14587, 9266) -> (14587, 11251)
    - 10 missing entries in student solution, including: (14587, 9266) -> (14587, 11251) -> (14587, 18175) -> (14587, 20019)


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6661, 1048) -> (6661, 6482)
    - reference segment 4: (6661, 1048) -> (6661, 6482) -> (6661, 6659) -> (6661, 20803)

    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 15 extra entries in student solution, including: (9502, 14994) -> (9502, 15019)
    - 15 missing entries in student solution, including: (9502, 14994) -> (9502, 15019) -> (9502, 19454) -> (9502, 20152)


    - failed on trial 1 of 5

==> FAILED

Test 4a: Points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: Random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: Points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 1000) -> (2000, 2000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - student   solution has 1 non-null entries
    - reference solution has 1 non-null entries
    - 1 extra entry in student solution: (1000, 1000) -> (2000, 2000)
    - 1 missing entry in student solution: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (28000, 13500) -> (23000, 16000)
    - reference segment 0: (28000, 13500) -> (23000, 16000) -> (13000, 21000) -> (3000, 26000)

    - student   solution has 2 non-null entries
    - reference solution has 2 non-null entries
    - 2 extra entries in student solution, including: (1000, 18000) -> (2000, 22000)
    - 2 missing entries in student solution, including: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4096, 20992) -> (5120, 20992)
    - reference segment 0: (4096, 20992) -> (5120, 20992) -> (6144, 20992) -> (7168, 20992) -> (8128, 20992)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (4160, 29184) -> (5120, 29184)
    - 5 missing entries in student solution, including: (4160, 29184) -> (5120, 29184) -> (6144, 29184) -> (7168, 29184) -> (8192, 29184)


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 1000) -> (12000, 10000)
    - reference segment 4: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - student   solution has 7 non-null entries
    - reference solution has 7 non-null entries
    - 7 extra entries in student solution, including: (1000, 26000) -> (9000, 26000)
    - 7 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8000, 0) -> (12000, 8000)
    - reference segment 19: (8000, 0) -> (12000, 8000) -> (14000, 12000) -> (22000, 28000)

    - student   solution has 31 non-null entries
    - reference solution has 31 non-null entries
    - 31 extra entries in student solution, including: (13000, 29000) -> (19000, 29000)
    - 31 missing entries in student solution, including: (13000, 29000) -> (19000, 29000) -> (25000, 29000) -> (28000, 29000)


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2950, 200) -> (2950, 4050)
    - reference segment 4: (2950, 200) -> (2950, 4050) -> (2950, 5600) -> (2950, 25400)

    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: (3250, 17450) -> (8500, 17450)
    - 6 missing entries in student solution, including: (3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)


  * filename = inarow.txt
    - segments() contain

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.