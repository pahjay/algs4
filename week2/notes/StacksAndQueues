push and pop in LinkedLists


How do you grow and shrink an array?
 - Can't increase size of array because it would have to copy all items to a new array
 - will take quadratic time to insert items into stack
-------------
GROWING ARRAY
-------------
Repeated Doubling - if array is full, create a new array of twice the size, then copy over.

        public ResizingArrayStackOfStrings(){
            s = new String[1];
        }

        public void push(String item){
            if (N == s.length) resize(s * s.length);
            s[N++] = item;
        }

        private void resize(int capacity){
            String[] copy = new String[capacity];
            for (int i = 0; i < N; i++){
                copy[i] s[i];
            }
            s = copy;
        }

Consequence: inserting first N items takes time proportional to N, not N^2
- you only create a new array every time it doubles, but by the time it doubles you have already inserted that many items into the stack
- total cost is about 3N, or three array accesses
---------------
SHRINKING ARRAY
---------------
- push() when size of array is full
- pop() halve the size of the array when the array is one-quarter full

        public String pop(){
            String item = s[--N];
            s[N] = null;
            if (N > 0 && N == s.length/4){
                resize(s.length/2);
            }
            return item;
        }

Amortized Analysis - average running time per operation over a worst-case sequence of operations
Proposition - starting from an empty stack, any sequence of M push and pop operations takes tim eproportional to M
--------------------------------
RESIZING AN ARRAY VS LINKED LIST
--------------------------------
Tradeoffs: Can implement a stack with either resizing array or linked list; client can use interchangeably. Which one is better?

Linked-List implementation
- every operation takes constant time in the worst case.
- uses extra time and space to deal with the links

Resizing-Array implementation
- every operation takes constant amortized time
- less wasted space

------
QUEUES
------
- Implementation in Linked-List
        public class LinkedQueueOfStrings {
            private Node first, last;

            private class Node {
                // same as stack of strings
            }

            public boolean isEmpty(){
                return first == null;
            }

            public void enqueue(String item){
                Node oldLast = last;
                last.item = item;
                last.next = null;
                if(isEmpty()) first = last; // special case for an empty queue
                else          oldLast.next = last;
            }

            public String dequeue(){
                String item = first.item;
                first       = first.next;
                if (isEmpty()) last = null; // special case for an empty queue
                return item;
            }

        }

--------
GENERICS
--------
- implementation of generics in a stack using linked lists

        public class Stack<Item> {
            private Node first = null;

            private class Node {
                Item item;
                Node next;
            }

            public boolean isEmpty() {
                return first == null;
            }

            public void push(Item item) {
                Node oldfirst = first;
                first = new Node();
                first.item = item;
                first.next = oldfirst;

            }

            public Item pop() {
                Item item = first.item;
                first = first.next;
                return item;
            }
        }

- implementation of generics using arrays

        public class FixedCapacityStack<Item> {
            private Item[] s;
            private int N = 0;

            public FixedCapacityStack(int capacity){
                s = (Item[]) new Object[capacity];
            }

            public boolean isEmpty() {
                return N == 0;
            }

            public void push(Item item) {
                s[N++] = item;
            }

            public Item pop() {
                return s[N--];
            }
        }

Wrapper Type: each primitive type in java has a wrapper object type

---------
ITERATORS
---------

- implementation of iterators in a linked list

        public class Stack<Item> implements Iterable<Item> {
            ...

            public Iterator<Item> iterator() {
                return new ListIterator();
            }

            private class ListIterator implements Iterator<Item> {
                private Node current = first;

                public boolean hasNext() {
                    return current != null;
                }
                public Item next() {
                    Item item = current.item;
                    current   = current.next;
                    return item;
                }
            }
        }

- implementation of iterators in an array

        public class Stack<Item> implements Iterable<Item> {
            ...

            public Iterator<Item> iterator() {
                return new ReverseArrayIterator();
            }

            private class ReverseArrayIterator implements Iterator<Item> {
                private int i = N;

                public boolean hasNext() {
                    return i > 0;
                }

                public Item next() {
                    return s[--i];
            }
        }